EXCESSIVE_FLAGS = {
    "OrderProcessor.py": "class OrderProcessor:\n    \"\"\"\n    A class demonstrating excessive flags in methods.\n    \"\"\"\n    def process_order(self, order, is_priority=False, is_gift=False, requires_signature=False):\n        \"\"\"\n        Processes an order with multiple flags to handle different behaviors.\n        \"\"\"\n        if is_priority:\n            print(\"Processing priority order\")\n        else:\n            print(\"Processing standard order\")\n\n        if is_gift:\n            print(\"Wrapping order as a gift\")\n\n        if requires_signature:\n            print(\"Adding signature requirement to order\")\n\n        print(\"Order processed successfully\")\n\ndef process_refund(order_id, is_partial=False, is_expedited=False):\n    \"\"\"\n    Function demonstrating excessive flags for refunds.\n    \"\"\"\n    if is_partial:\n        print(f\"Processing partial refund for order {order_id}\")\n    else:\n        print(f\"Processing full refund for order {order_id}\")\n\n    if is_expedited:\n        print(\"Expedited refund enabled\")\n\n    print(\"Refund processed successfully\")",
    "PaymentHandler.py": "class PaymentHandler:\n    \"\"\"\n    A class demonstrating excessive flags in methods.\n    \"\"\"\n    def handle_payment(self, amount, is_recurring=False, apply_discount=False, is_refund=False):\n        \"\"\"\n        Handles payment processing with multiple flags.\n        \"\"\"\n        if is_refund:\n            print(f\"Processing refund of {amount}\")\n            return\n\n        if apply_discount:\n            amount *= 0.9  # Apply 10% discount\n            print(f\"Discount applied. New amount: {amount}\")\n\n        if is_recurring:\n            print(f\"Processing recurring payment of {amount}\")\n        else:\n            print(f\"Processing one-time payment of {amount}\")\n\n        print(\"Payment processed successfully\")",
    "RefactoredOrderProcessor.py": "class OrderProcessor:\n    \"\"\"\n    Refactored version of the order processor avoiding excessive flags.\n    \"\"\"\n    def process_order(self, order, behavior):\n        \"\"\"\n        Processes an order with a behavior strategy instead of flags.\n        \"\"\"\n        behavior.handle(order)\n\nclass PriorityOrder:\n    def handle(self, order):\n        print(\"Processing priority order\")\n        print(\"Order processed successfully\")\n\nclass GiftOrder:\n    def handle(self, order):\n        print(\"Wrapping order as a gift\")\n        print(\"Order processed successfully\")\n\nclass StandardOrder:\n    def handle(self, order):\n        print(\"Processing standard order\")\n        print(\"Order processed successfully\")",
    "RefactoredPaymentHandler.py": "class PaymentHandler:\n    \"\"\"\n    Refactored version of the payment handler avoiding excessive flags.\n    \"\"\"\n    def handle_payment(self, amount, behavior):\n        \"\"\"\n        Handles payment with a behavior strategy instead of flags.\n        \"\"\"\n        behavior.process(amount)\n\nclass RefundPayment:\n    def process(self, amount):\n        print(f\"Processing refund of {amount}\")\n\nclass RecurringPayment:\n    def process(self, amount):\n        print(f\"Processing recurring payment of {amount}\")\n\nclass DiscountedPayment:\n    def process(self, amount):\n        amount *= 0.9\n        print(f\"Discount applied. New amount: {amount}\")\n        print(\"Processing discounted payment\")",
    "StandaloneFunctions.py": "def send_notification(user, message, is_email=False, is_sms=False, is_push=False):\n    \"\"\"\n    Function demonstrating excessive flags for notifications.\n    \"\"\"\n    if is_email:\n        print(f\"Sending email to {user}: {message}\")\n\n    if is_sms:\n        print(f\"Sending SMS to {user}: {message}\")\n\n    if is_push:\n        print(f\"Sending push notification to {user}: {message}\")\n\n    print(\"Notification sent successfully\")\n\ndef handle_shipping(order_id, is_expedited=False, is_international=False):\n    \"\"\"\n    Function demonstrating excessive flags for shipping.\n    \"\"\"\n    if is_expedited:\n        print(f\"Processing expedited shipping for order {order_id}\")\n    else:\n        print(f\"Processing standard shipping for order {order_id}\")\n\n    if is_international:\n        print(\"International shipping enabled\")\n\n    print(\"Shipping handled successfully\")",
    "RefactoredStandaloneFunctions.py": "def send_notification(user, message, method):\n    \"\"\"\n    Refactored notification function using a method strategy instead of flags.\n    \"\"\"\n    method.notify(user, message)\n\nclass EmailNotification:\n    def notify(self, user, message):\n        print(f\"Sending email to {user}: {message}\")\n\nclass SMSNotification:\n    def notify(self, user, message):\n        print(f\"Sending SMS to {user}: {message}\")\n\nclass PushNotification:\n    def notify(self, user, message):\n        print(f\"Sending push notification to {user}: {message}\")\n\ndef handle_shipping(order_id, shipping_strategy):\n    \"\"\"\n    Refactored shipping function using a strategy pattern instead of flags.\n    \"\"\"\n    shipping_strategy.ship(order_id)\n\nclass StandardShipping:\n    def ship(self, order_id):\n        print(f\"Processing standard shipping for order {order_id}\")\n\nclass ExpeditedShipping:\n    def ship(self, order_id):\n        print(f\"Processing expedited shipping for order {order_id}\")\n\nclass InternationalShipping:\n    def ship(self, order_id):\n        print(f\"Processing international shipping for order {order_id}\")"
}
