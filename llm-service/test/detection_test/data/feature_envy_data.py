FEATURE_ENVY = {
    "OrderProcessing.py": "class OrderProcessor:\n    \"\"\"\n    A class to process orders.\n    \"\"\"\n    def process_order(self, order, inventory, payment_service, logger):\n        \"\"\"\n        Process the order and update inventory.\n        \"\"\"\n        # Feature envy: excessive calls to payment_service and inventory\n        if not inventory.check_stock(order['items']):\n            logger.error(\"Not enough stock.\")\n            return \"Failed: Out of Stock\"\n        if not payment_service.charge(order['customer_id'], order['total']):\n            logger.error(\"Payment failed.\")\n            return \"Failed: Payment Error\"\n        inventory.update_stock(order['items'])\n        logger.info(\"Order processed successfully.\")\n        return \"Success\"",
    "InventoryManagement.py": "class Inventory:\n    \"\"\"\n    A class to manage inventory.\n    \"\"\"\n    def check_stock(self, items):\n        \"\"\"\n        Check if items are in stock.\n        \"\"\"\n        return all(item['quantity'] <= self.stock.get(item['id'], 0) for item in items)\n\n    def update_stock(self, items):\n        \"\"\"\n        Update stock after order processing.\n        \"\"\"\n        for item in items:\n            self.stock[item['id']] -= item['quantity']",
    "PaymentService.py": "class PaymentService:\n    \"\"\"\n    A class to handle payments.\n    \"\"\"\n    def charge(self, customer_id, amount):\n        \"\"\"\n        Charge the customer.\n        \"\"\"\n        print(f\"Charging customer {customer_id} an amount of {amount}.\")\n        return True  # Assume success for testing",
    "UserManagement.py": "class UserManager:\n    \"\"\"\n    A class to manage users.\n    \"\"\"\n    def add_user(self, username, password, db):\n        \"\"\"\n        Add a new user to the database.\n        \"\"\"\n        db.add_user(username, password)\n\n    def login(self, username, password, db):\n        \"\"\"\n        Validate login credentials.\n        \"\"\"\n        return db.validate_credentials(username, password)",
    "DatabaseUtils.py": "class Database:\n    \"\"\"\n    A class for database operations.\n    \"\"\"\n    def add_user(self, username, password):\n        \"\"\"\n        Add a new user to the database.\n        \"\"\"\n        print(f\"User {username} added to the database.\")\n\n    def validate_credentials(self, username, password):\n        \"\"\"\n        Validate user credentials.\n        \"\"\"\n        print(f\"Validating credentials for user {username}.\")\n        return True  # Assume success for testing",
    "Utils.py": "def validate_email(email):\n    \"\"\"\n    Validate email format.\n    \"\"\"\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, email))\n\ndef format_name(name):\n    \"\"\"\n    Capitalize the first letter of each word in a name.\n    \"\"\"\n    return ' '.join(word.capitalize() for word in name.split())"
}
