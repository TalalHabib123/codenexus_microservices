INAPPROPRIATE_INTIMACY = {
    "OrderProcessor.py": "class OrderProcessor:\n    \"\"\"\n    A class that processes orders.\n    \"\"\"\n    def process_order_direct_access(self, order, inventory, logger):\n        \"\"\"\n        Process the order by directly accessing Inventory's private attributes (bad practice).\n        \"\"\"\n        for item in order['items']:\n            if item['id'] not in inventory._stock or inventory._stock[item['id']] < item['quantity']:\n                logger.error(f\"Item {item['id']} is out of stock.\")\n                return \"Failed: Out of Stock\"\n            inventory._stock[item['id']] -= item['quantity']\n        logger.info(\"Order processed successfully.\")\n        return \"Success\"\n\n    def process_order_proper_method(self, order, inventory, logger):\n        \"\"\"\n        Process the order using Inventory's public methods (good practice).\n        \"\"\"\n        if not inventory.has_stock(order['items']):\n            logger.error(\"Not enough stock.\")\n            return \"Failed: Out of Stock\"\n        inventory.reduce_stock(order['items'])\n        logger.info(\"Order processed successfully.\")\n        return \"Success\"",
    "Inventory.py": "class Inventory:\n    \"\"\"\n    A class to manage inventory.\n    \"\"\"\n    def __init__(self):\n        self._stock = {}\n\n    def add_stock(self, item_id, quantity):\n        \"\"\"\n        Add stock to the inventory.\n        \"\"\"\n        if item_id not in self._stock:\n            self._stock[item_id] = 0\n        self._stock[item_id] += quantity\n\n    def has_stock(self, items):\n        \"\"\"\n        Check if all items are in stock.\n        \"\"\"\n        return all(self._stock.get(item['id'], 0) >= item['quantity'] for item in items)\n\n    def reduce_stock(self, items):\n        \"\"\"\n        Reduce stock for the given items.\n        \"\"\"\n        for item in items:\n            self._stock[item['id']] -= item['quantity']",
    "CustomerAndNotification.py": "class Customer:\n    \"\"\"\n    A class representing a customer.\n    \"\"\"\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n    def get_contact_details(self):\n        \"\"\"\n        Return customer's contact details.\n        \"\"\"\n        return {\"name\": self.name, \"email\": self.email}\n\nclass NotificationService:\n    \"\"\"\n    A class for sending notifications.\n    \"\"\"\n    def send_direct_access(self, customer, message):\n        \"\"\"\n        Send a message by directly accessing customer's attributes (bad practice).\n        \"\"\"\n        print(f\"Sending message to {customer.name} ({customer.email}): {message}\")\n\n    def send_proper_method(self, customer, message):\n        \"\"\"\n        Send a message using customer's public method (good practice).\n        \"\"\"\n        details = customer.get_contact_details()\n        print(f\"Sending message to {details['name']} ({details['email']}): {message}\")"
}
