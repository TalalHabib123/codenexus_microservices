MIDDLE_MAN = {
    "OrderManager.py": "class OrderManager:\n    \"\"\"\n    A class to manage orders.\n    \"\"\"\n    def __init__(self, inventory_manager):\n        self.inventory_manager = inventory_manager\n\n    def place_order_direct_delegate(self, order):\n        \"\"\"\n        Place an order by delegating all calls to InventoryManager (bad practice).\n        \"\"\"\n        if not self.inventory_manager.check_stock(order['items']):\n            return \"Order failed: Out of stock\"\n        self.inventory_manager.reserve_stock(order['items'])\n        self.inventory_manager.update_inventory(order['items'])\n        return \"Order placed successfully\"\n\n    def place_order_redundant(self, order):\n        \"\"\"\n        Example of redundant middle man methods (bad practice).\n        \"\"\"\n        return self.inventory_manager.check_stock(order['items'])\n\n    def place_order_direct_access(self, order):\n        \"\"\"\n        Access inventory methods directly (better approach).\n        \"\"\"\n        if not self.inventory_manager.has_stock(order['items']):\n            return \"Order failed: Out of stock\"\n        self.inventory_manager.reduce_stock(order['items'])\n        return \"Order placed successfully\"",
    "InventoryManager.py": "class InventoryManager:\n    \"\"\"\n    A class to manage inventory.\n    \"\"\"\n    def __init__(self):\n        self._inventory = {}\n\n    def add_item(self, item_id, quantity):\n        \"\"\"\n        Add items to the inventory.\n        \"\"\"\n        if item_id not in self._inventory:\n            self._inventory[item_id] = 0\n        self._inventory[item_id] += quantity\n\n    def check_stock(self, items):\n        \"\"\"\n        Check if all items are in stock.\n        \"\"\"\n        return all(self._inventory.get(item['id'], 0) >= item['quantity'] for item in items)\n\n    def reserve_stock(self, items):\n        \"\"\"\n        Reserve stock for the given items.\n        \"\"\"\n        for item in items:\n            self._inventory[item['id']] -= item['quantity']\n\n    def update_inventory(self, items):\n        \"\"\"\n        Update inventory based on the items purchased.\n        \"\"\"\n        for item in items:\n            self._inventory[item['id']] -= item['quantity']",
    "NotificationService.py": "class NotificationService:\n    \"\"\"\n    A service for handling customer notifications.\n    \"\"\"\n    def send_notification(self, customer_email, message):\n        \"\"\"\n        Send a notification message to a customer.\n        \"\"\"\n        print(f\"Sending notification to {customer_email}: {message}\")",
    "CustomerManager.py": "class CustomerManager:\n    \"\"\"\n    A class to manage customers.\n    \"\"\"\n    def __init__(self, notification_service):\n        self.notification_service = notification_service\n\n    def notify_customer_direct_delegate(self, customer_email, message):\n        \"\"\"\n        Notify a customer by delegating to the NotificationService (bad practice).\n        \"\"\"\n        self.notification_service.send_notification(customer_email, message)\n\n    def notify_customer_direct_call(self, customer_email, message):\n        \"\"\"\n        Notify a customer directly (better approach).\n        \"\"\"\n        print(f\"Sending notification to {customer_email}: {message}\")"
}
