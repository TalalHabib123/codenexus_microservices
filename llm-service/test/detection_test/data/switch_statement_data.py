SWITCH_STATEMENT_ABUSERS = {
    "PaymentProcessor.py": "class PaymentProcessor:\n    \"\"\"\n    A class demonstrating a switch statement abuse.\n    \"\"\"\n    def process_payment(self, payment_type, amount):\n        \"\"\"\n        Process payment based on the payment type.\n        \"\"\"\n        if payment_type == 'credit_card':\n            self.process_credit_card(amount)\n        elif payment_type == 'paypal':\n            self.process_paypal(amount)\n        elif payment_type == 'bank_transfer':\n            self.process_bank_transfer(amount)\n        elif payment_type == 'crypto':\n            self.process_crypto(amount)\n        else:\n            raise ValueError(\"Unsupported payment type\")\n\n    def process_credit_card(self, amount):\n        print(f\"Processing credit card payment of {amount}\")\n\n    def process_paypal(self, amount):\n        print(f\"Processing PayPal payment of {amount}\")\n\n    def process_bank_transfer(self, amount):\n        print(f\"Processing bank transfer payment of {amount}\")\n\n    def process_crypto(self, amount):\n        print(f\"Processing cryptocurrency payment of {amount}\")\n\ndef process_refund(payment_type, amount):\n    \"\"\"\n    Function demonstrating switch statement abuse for refunds.\n    \"\"\"\n    if payment_type == 'credit_card':\n        print(f\"Refunding {amount} to credit card\")\n    elif payment_type == 'paypal':\n        print(f\"Refunding {amount} to PayPal\")\n    elif payment_type == 'bank_transfer':\n        print(f\"Refunding {amount} to bank transfer\")\n    elif payment_type == 'crypto':\n        print(f\"Refunding {amount} in cryptocurrency\")\n    else:\n        raise ValueError(\"Unsupported refund type\")",
    "PaymentStrategy.py": "class PaymentStrategy:\n    \"\"\"\n    A better approach using strategy pattern to avoid switch statement abuse.\n    \"\"\"\n    def __init__(self, payment_method):\n        self.payment_method = payment_method\n\n    def process_payment(self, amount):\n        self.payment_method.process(amount)\n\nclass CreditCardPayment:\n    def process(self, amount):\n        print(f\"Processing credit card payment of {amount}\")\n\nclass PayPalPayment:\n    def process(self, amount):\n        print(f\"Processing PayPal payment of {amount}\")\n\nclass BankTransferPayment:\n    def process(self, amount):\n        print(f\"Processing bank transfer payment of {amount}\")\n\nclass CryptoPayment:\n    def process(self, amount):\n        print(f\"Processing cryptocurrency payment of {amount}\")\n\ndef refund_payment(payment_method, amount):\n    \"\"\"\n    Function using strategy pattern for refunds.\n    \"\"\"\n    payment_method.process_refund(amount)\n\nclass CreditCardRefund:\n    def process_refund(self, amount):\n        print(f\"Refunding {amount} to credit card\")\n\nclass PayPalRefund:\n    def process_refund(self, amount):\n        print(f\"Refunding {amount} to PayPal\")\n\nclass BankTransferRefund:\n    def process_refund(self, amount):\n        print(f\"Refunding {amount} to bank transfer\")\n\nclass CryptoRefund:\n    def process_refund(self, amount):\n        print(f\"Refunding {amount} in cryptocurrency\")",
    "OrderHandler.py": "class OrderHandler:\n    \"\"\"\n    Another example of switch statement abuse in order processing.\n    \"\"\"\n    def handle_order(self, order_type, order_details):\n        \"\"\"\n        Handle orders based on their type.\n        \"\"\"\n        if order_type == 'online':\n            self.handle_online_order(order_details)\n        elif order_type == 'instore':\n            self.handle_instore_order(order_details)\n        elif order_type == 'pickup':\n            self.handle_pickup_order(order_details)\n        else:\n            raise ValueError(\"Unsupported order type\")\n\n    def handle_online_order(self, order_details):\n        print(f\"Handling online order: {order_details}\")\n\n    def handle_instore_order(self, order_details):\n        print(f\"Handling in-store order: {order_details}\")\n\n    def handle_pickup_order(self, order_details):\n        print(f\"Handling pickup order: {order_details}\")\n\ndef process_shipping(order_type, details):\n    \"\"\"\n    Function demonstrating switch statement abuse for shipping.\n    \"\"\"\n    if order_type == 'standard':\n        print(f\"Processing standard shipping for {details}\")\n    elif order_type == 'express':\n        print(f\"Processing express shipping for {details}\")\n    elif order_type == 'overnight':\n        print(f\"Processing overnight shipping for {details}\")\n    else:\n        raise ValueError(\"Unsupported shipping type\")",
    "OrderStrategy.py": "class OrderHandler:\n    \"\"\"\n    Refactored order handling using strategy pattern to avoid switch statement abuse.\n    \"\"\"\n    def __init__(self, order_strategy):\n        self.order_strategy = order_strategy\n\n    def handle_order(self, order_details):\n        self.order_strategy.handle(order_details)\n\nclass OnlineOrder:\n    def handle(self, order_details):\n        print(f\"Handling online order: {order_details}\")\n\nclass InstoreOrder:\n    def handle(self, order_details):\n        print(f\"Handling in-store order: {order_details}\")\n\nclass PickupOrder:\n    def handle(self, order_details):\n        print(f\"Handling pickup order: {order_details}\")\n\ndef handle_shipping(strategy, details):\n    \"\"\"\n    Function using strategy pattern for shipping.\n    \"\"\"\n    strategy.ship(details)\n\nclass StandardShipping:\n    def ship(self, details):\n        print(f\"Processing standard shipping for {details}\")\n\nclass ExpressShipping:\n    def ship(self, details):\n        print(f\"Processing express shipping for {details}\")\n\nclass OvernightShipping:\n    def ship(self, details):\n        print(f\"Processing overnight shipping for {details}\")"
}
